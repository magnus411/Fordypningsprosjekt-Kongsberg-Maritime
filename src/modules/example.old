#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <sys/select.h> // for select()

#define PORT        3490 // Port number
#define MAXDATASIZE 100  // Max number of bytes to receive at once

int
main(int argc, char *argv[])
{
    int                sockfd, numbytes;
    char               buf[MAXDATASIZE];
    struct sockaddr_in server_addr;
    fd_set             read_fds;
    struct timeval     tv;
    int                retval;
    char               s[INET_ADDRSTRLEN];

    if(argc != 2)
    {
        fprintf(stderr, "usage: client <IPv4-address>\n");
        exit(1);
    }

    // Create a socket
    if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
    {
        perror("client: socket");
        exit(1);
    }

    // Set up the server address structure
    memset(&server_addr, 0, sizeof server_addr); // Zero out the struct
    server_addr.sin_family = AF_INET;            // IPv4
    server_addr.sin_port   = htons(PORT);        // Port number in network byte order

    // Convert the string IP address (argv[1]) to binary form
    if(inet_pton(AF_INET, argv[1], &server_addr.sin_addr) <= 0)
    {
        perror("inet_pton");
        exit(1);
    }

    // Connect to the server
    if(connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1)
    {
        perror("client: connect");
        close(sockfd);
        exit(1);
    }

    // Convert the binary IP address to a human-readable string
    inet_ntop(AF_INET, &server_addr.sin_addr, s, sizeof s);
    printf("client: connecting to %s\n", s);

    // Initialize the file descriptor set
    FD_ZERO(&read_fds);
    FD_SET(sockfd, &read_fds); // Add the socket to the set

    // Main loop to monitor the socket using select()
    while(1)
    {
        fd_set temp_fds = read_fds; // Copy the file descriptor set, since select modifies it
        retval          = select(sockfd + 1, &temp_fds, NULL, NULL, &tv);

        if(retval == -1)
        {
            perror("select()");
            close(sockfd);
            exit(1);
        }
        else if(retval == 0)
        {
            // Timeout, you can add any other task here during the waiting period
            printf("No data received within 5 seconds, still waiting...\n");
        }
        else
        {
            // The socket is ready to be read
            if(FD_ISSET(sockfd, &temp_fds))
            {
                if((numbytes = recv(sockfd, buf, MAXDATASIZE - 1, 0)) == -1)
                {
                    perror("recv");
                    close(sockfd);
                    exit(1);
                }
                else if(numbytes == 0)
                {
                    // Server closed the connection
                    printf("Server closed the connection.\n");
                    close(sockfd);
                    break;
                }

                buf[numbytes] = '\0'; // Null-terminate the received data
                printf("client: received '%s'\n", buf);
            }
        }
    }

    return 0;
}
